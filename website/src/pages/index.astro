---
import BasePage from "../layouts/BasePage.astro";
import InlineSVG from "../components/InlineSVG.astro";
import NoUnreachableExample from "../components/NoUnreachableExample.astro";
import { Prism } from "@astrojs/prism";
---

<BasePage
	titleHead={"Biome"}
	description={"Description"}
	bodyClass="homepage-body"
>
	<div class="homepage">
		<section>
			<h1 class="sr-only">Rome is a unified formatter and linter</h1>
			<div aria-hidden="true" class="h1">
				Rome is a unified
				<ul>
					<li class="formatter">formatter</li>
					<li class="linter" hidden>linter</li>
					<!--<li class="compiler" hidden>compiler</li>
					<li class="bundler" hidden>bundler</li>
					<li class="minifier" hidden>minifier</li>
					<li class="testing-framework long" hidden>testing framework</li>
					<li class="docs-generator long" hidden>documentation generator</li>
					<li class="task-runner long" hidden>task runner</li>
					<li class="repo-manager long" hidden>repo manager</li>-->
				</ul>
			</div>
			<div class="hero-buttons">
				<a target="_blank" href="/docs/" class="button">Documentation</a>
				<a target="_blank" href="/docs/playground" class="button">Playground</a>
			</div>
			<aside hidden class="latest-post" aria-labelledby="latest-post">
				<h3>
					<a href="{{ post.url }}"><!--{{ post.data.title }}--></a>
				</h3>
				<div class="author">
					<!--{{ post.date | dateFormat }}-->
				</div>
			</aside>
			<p>
				Rome unifies your development stack by combining the functionality of
				separate tools.
			</p>
			<p>
				Single configuration file, amazing performance, and works with any
				stack.
			</p>
			<ul class="supported-languages">
				<li>
					<div class="icon"><InlineSVG src="javascript" /></div>
					<div class="language">JavaScript</div>
				</li>
				<li>
					<div class="icon"><InlineSVG src="typescript" /></div>
					<div class="language">TypeScript</div>
				</li>
				<li class="soon">
					<div class="icon"><InlineSVG src="json" /></div>
					<div class="language">JSON</div>
				</li>
				<li class="soon">
					<div class="icon"><InlineSVG src="html" /></div>
					<div class="language">HTML</div>
					<div class="soon-indicator">Soon</div>
				</li>
				<li class="soon">
					<div class="icon foreground-svg"><InlineSVG src="markdown" /></div>
					<div class="language">Markdown</div>
					<div class="soon-indicator">Soon</div>
				</li>
				<li class="soon">
					<div class="icon"><InlineSVG src="css" /></div>
					<div class="language">CSS</div>
					<div class="soon-indicator">Soon</div>
				</li>
			</ul>

			<p class="founder-clout">
				Founded by the creator of <a target="_blank" class="babel" href="https://babeljs.io/"><InlineSVG src="babel" /><span class="sr-only">Babel</span></a> and <a target="_blank" href="https://yarnpkg.com/" class="yarn"><InlineSVG src="yarn" /><span class="sr-only">Yarn</span></a>.
			</p>
		</section>

		<hr class="half" />

		<section class="supercharge">
			<h2>Supercharge your workflow</h2>
			<p class="heading-tagline">
				Experience the seamless integration of a vertical toolchain. Full of
				useful features like formatting and linting, with even more coming soon.
			</p>
			<ul class="component-list">
				<li data-class="component-window-formatter" class="active">
					Formatter
				</li>
				<li data-class="component-window-linter">Linter</li>
				<li class="soon">
					<div class="text">Compiler</div>
					<div class="soon-indicator">Soon</div>
				</li>
				<li data-class="component-window-bundler" class="soon">
					<div class="text">Bundler</div>
					<div class="soon-indicator">Soon</div>
				</li>
				<li data-class="component-window-testing" class="soon">
					<div class="text">Testing</div>
					<div class="soon-indicator">Soon</div>
				</li>
				<!--<li data-class="component-window-testing" class="soon">
          <div class="text">Documentation</div>
          <div class="soon-indicator">Soon</div>
        </li>
        <li data-class="component-window-testing" class="soon">
          <div class="text">Minifier</div>
          <div class="soon-indicator">Soon</div>
        </li>
        <li data-class="component-window-testing" class="soon">
          <div class="text">Repo Management</div>
          <div class="soon-indicator">Soon</div>
        </li>
        <li data-class="component-window-testing" class="soon">
          <div class="text">Task Runner</div>
          <div class="soon-indicator">Soon</div>
        </li>-->
			</ul>
			<div class="component-window component-window-formatter">
				<div class="code">
					<h4>Code</h4>
					<Prism
						lang="js"
						code={`
function HelloWorld({greeting = "hello", greeted = '"World"', silent = false, onMouseOver,}) {

  if(!greeting){return null};

      // TODO: Don't use random in render
  let num = Math.floor (Math.random() * 1E+7).toString().replace(/\.\d+/ig, "")

  return <div className='HelloWorld' title={\`You are visitor number \${ num }\`} onMouseOver={onMouseOver}>

    <strong>{ greeting.slice( 0, 1 ).toUpperCase() + greeting.slice(1).toLowerCase() }</strong>
    {greeting.endsWith(",") ? " " : <span style={{color: '\grey'}}>", "</span> }
    <em>
  { greeted }
    </em>
    { (silent)
      ? "."
      : "!"}

    </div>;

}
`}
					/>
				</div>
				<div class="output">
					<h4>Output</h4>
					<Prism
						lang="js"
						code={`
function HelloWorld({
  greeting = "hello",
  greeted = '"World"',
  silent = false,
  onMouseOver,
}) {
  if (!greeting) {
    return null;
  }

  // TODO: Don't use random in render
  let num = Math.floor(Math.random() * 1E+7)
    .toString()
    .replace(/\.\d+/gi, "");

  return (
    <div
      className="HelloWorld"
      title={\`You are visitor number \${num}\`}
      onMouseOver={onMouseOver}
    >
      <strong>
        {greeting.slice(0, 1).toUpperCase() + greeting.slice(1).toLowerCase()}
      </strong>
      {greeting.endsWith(",") ? (
        " "
      ) : (
        <span style={{ color: "grey" }}>", "</span>
      )}
      <em>{greeted}</em>
      {silent ? "." : "!"}
    </div>
  );
}
`}
					/>
				</div>
				<div class="performance" style="--prettier-total-time: 4.3s;">
					<h4>Performance</h4>
					<p class="progress-header">
						<span class="tool-name">Rome</span> finished in <span
							class="time-good">0.1s</span
						>
					</p>
					<div class="progress">
						<div class="progress-bar progress-bar-good" style="width: 10px;">
						</div>
					</div>
					<p class="progress-header">
						<span class="tool-name">Prettier</span> finished in <span
							class="time-bad">4.3s</span
						>
					</p>
					<div class="progress">
						<div class="progress-bar progress-bar-bad"></div>
					</div>
					<div class="spreader"></div>
					<p class="multiplier">~25x</p>
					<p>
						Faster than Prettier when formatting 85,000 lines of code. <a
							href="https://github.com/rome/tools/tree/main/benchmark/README.md"
							>See benchmark</a
						>.
					</p>
				</div>
			</div>
			<div class="component-window component-window-linter" hidden="true">
				<div class="code">
					<h4>Code</h4>
					<Prism
						lang="js"
						code={`
function test(callback) {
  try {
    return callback();
  } catch (e) {
    console.log(e);
    throw e;
  }

  return 20;
}
`}
					/>
				</div>
				<div class="output">
					<h4>Console output</h4>
					<NoUnreachableExample />
				</div>
			</div>
		</section>

		<hr class="full" />

		<section>
			<h2 class="sr-only">Features</h2>
			<ul class="features">
				<li>
					<div class="icon foreground-svg"><InlineSVG src="chevron" /></div>
					<h3>Fast</h3>
					<p>
						Built with Rust and an innovative architecture inspired by <a
							href="https://rust-analyzer.github.io/">rust-analyzer</a
						>. <a href="/blog/2022/11/08/rome-10.html#our-approach"
							>We are able to do even more while being faster.</a
						>
					</p>
				</li>
				<li>
					<div class="icon foreground-svg"><InlineSVG src="layers" /></div>
					<h3>Simple</h3>
					<p>
						Zero configuration needed to get started. <a
							href="/docs/configuration"
							>Extensive options available</a
						> for when you need them.
					</p>
				</li>
				<li>
					<div class="icon foreground-svg"><InlineSVG src="maximize" /></div>
					<h3>Scalable</h3>
					<p>
						Designed to handle codebases of any size. Focus on growing <strong
							>product</strong
						> instead of your tools.
					</p>
				</li>
				<li>
					<div class="icon foreground-svg"><InlineSVG src="lightning" /></div>
					<h3>Optimized</h3>
					<p>
						With tight internal integration we are able to reuse previous work
						and any improvement to one tool improves them all.
					</p>
				</li>
				<li>
					<div class="icon foreground-svg"><InlineSVG src="action" /></div>
					<h3>Actionable &amp; Informative</h3>
					<p>
						Avoid obscure error messages, when we tell you something is wrong,
						we tell you exactly where the problem is and how to fix it.
					</p>
				</li>
				<li>
					<div class="icon foreground-svg"><InlineSVG src="box" /></div>
					<h3>Batteries Included</h3>
					<p>
						Out of the box support for all the language features you use today.
						First class support for TypeScript and JSX.
					</p>
				</li>
			</ul>
		</section>

		<section class="try-rome">
			<h2>Try Rome today</h2>
			<p>
				Install Rome using your preferred package manager or get it as a VS Code
				extension.
			</p>
			<div>
				<a
					target="_blank"
					href="https://marketplace.visualstudio.com/items?itemName=rome.rome"
					class="button vscode-button"
					><InlineSVG src="vscode" /> Get VS Code Extension</a
				>
			</div>
			<div>
				<a
					target="_blank"
					href="/docs/guides/getting-started"
					class="button install-button">Getting started</a
				>
			</div>
			<div class="window console-window">
				<div class="command">
					<div class="line">
						<span class="shell-symbol">$</span> npm install <span class="rome"
							>rome</span
						>
					</div>
					<div class="line"><span>Added 1 package</span></div>
				</div>
				<div class="command">
					<div class="line">
						<span class="shell-symbol">$</span> npx <span class="rome"
							>rome</span
						> check .
					</div>
					<div class="line"><span>Checked 780 files in 12ms.</span></div>
				</div>
				<div class="command">
					<div class="line">
						<span class="shell-symbol">$</span> npx <span class="rome"
							>rome</span
						> format .
					</div>
					<div class="line"><span>Checked 650 files in 42ms.</span></div>
				</div>
			</div>
			<div class="window vscode-window"></div>
		</section>
	</div>
</BasePage>
